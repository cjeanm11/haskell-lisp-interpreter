(def one 1)
(def two (+ one one))
(def three ((+ two) one))
;; ↝ [("one",1)]
;; ↝ [("two",2)]
;; ↝ [("three",3)]

(def test-parens (- (6) (1)))
(def five (+ . (2 . (3 . ()))))
(def twenty (/ (* (- 68 32) 5) (* 3 3)))
;; ↝ [("test-parens",5)]
;; ↝ [("five",5)]
;; ↝ [("twenty",20)]

(defs (def x 1) (def y (+ 1 1)) (def z (+ (- 68 32) (- 68 32))))
;; ↝ [("z",72),("y",2),("x",1)]

(def plusOne (lambda x (+ 1 x)))
(def six (plusOne 5))
;; ↝ [("plusOne",#<function:closure>)]
;; ↝ [("six",6)]


(def testIf ( if (= (+ 1 1) (+ 3 2))
                 (let ((x 2)
                       (y 3))
                   (+ x y))
                 (let ((x 6)
                       (y 6))
                   (+ x (+ y 12)))))
;; ↝ [("testIf",24)]

(def funcLet (let ((test (lambda x (x))))
         (test 8)))
;; ↝ [("funcLet",8)]

(def test ((lambda x ((lambda y (if (= 1 0) 1 y)) x)) 10))
;; ↝ [("test",10)]

(def funcLet (let ((even (lambda x
                     (if (= x 0) true (odd (- x 1)))))
                   (odd (lambda x
                     (if (= x 0) false (even (- x 1))))))
   (odd 8)))
;; ↝ [("funcLet",false)]


(def pow2 (let (powerOf2 (lambda x (if (= x 0)
                          1
                          (+ (powerOf2 (- x 1)) (powerOf2 (- x 1)))))) 
   (powerOf2 10)))
;; ↝ [("pow2",1024)]

(def shorthand-quote quote)
(def test-quote1 '6)
(def test-quote2 'if)
;; ↝ [("shorthand-quote",#<special-form:quote>)]
;; ↝ [("test-quote1",(6))]
;; ↝ [("test-quote2",(if))]

(def macro (lambda f (cons (quote macro) f)))
(def lambda1
     (macro (lambda args
              (cons (quote lambda)
                    (cons (car args)
                          (cdr args))))))
(def quatre ((lambda1 (x) (+ x 1)) 3))
;; ↝ [("macro",#<function:closure>)]
;; ↝ [("lambda1",(macro . #<function:closure>))]
;; ↝ [("quatre",4)]

(def list
     (macro
      (lambda args
        (if args
            (cons 'cons
                  (cons (car args)
                        (cons (cons 'list
                                    (cdr args))
                              (quote ()))))
          '()))))

(def onetothree (list 1 2 3))
(def onetofive (list 1 2 3 4 5))
;; ↝ [("list",(macro . #<function:closure>))]
;; ↝ [("onetothree",(1 2 3))]
;; ↝ [("onetofive",(1 2 3 4 5))]

